/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: koke_kokko.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./record_metadata_options";
import * as pb_1 from "google-protobuf";
export namespace csdi {
    export class User extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            email?: string;
            username?: string;
            password?: string;
            profile_photo?: string;
            follow_tag_arr?: string[];
            published_article_arr?: string[];
            bookmark_article_arr?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("profile_photo" in data && data.profile_photo != undefined) {
                    this.profile_photo = data.profile_photo;
                }
                if ("follow_tag_arr" in data && data.follow_tag_arr != undefined) {
                    this.follow_tag_arr = data.follow_tag_arr;
                }
                if ("published_article_arr" in data && data.published_article_arr != undefined) {
                    this.published_article_arr = data.published_article_arr;
                }
                if ("bookmark_article_arr" in data && data.bookmark_article_arr != undefined) {
                    this.bookmark_article_arr = data.bookmark_article_arr;
                }
            }
        }
        get email() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get profile_photo() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set profile_photo(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get follow_tag_arr() {
            return pb_1.Message.getField(this, 5) as string[];
        }
        set follow_tag_arr(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get published_article_arr() {
            return pb_1.Message.getField(this, 6) as string[];
        }
        set published_article_arr(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get bookmark_article_arr() {
            return pb_1.Message.getField(this, 7) as string[];
        }
        set bookmark_article_arr(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            email?: string;
            username?: string;
            password?: string;
            profile_photo?: string;
            follow_tag_arr?: string[];
            published_article_arr?: string[];
            bookmark_article_arr?: string[];
        }) {
            const message = new User({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.profile_photo != null) {
                message.profile_photo = data.profile_photo;
            }
            if (data.follow_tag_arr != null) {
                message.follow_tag_arr = data.follow_tag_arr;
            }
            if (data.published_article_arr != null) {
                message.published_article_arr = data.published_article_arr;
            }
            if (data.bookmark_article_arr != null) {
                message.bookmark_article_arr = data.bookmark_article_arr;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                username?: string;
                password?: string;
                profile_photo?: string;
                follow_tag_arr?: string[];
                published_article_arr?: string[];
                bookmark_article_arr?: string[];
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.profile_photo != null) {
                data.profile_photo = this.profile_photo;
            }
            if (this.follow_tag_arr != null) {
                data.follow_tag_arr = this.follow_tag_arr;
            }
            if (this.published_article_arr != null) {
                data.published_article_arr = this.published_article_arr;
            }
            if (this.bookmark_article_arr != null) {
                data.bookmark_article_arr = this.bookmark_article_arr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.email === "string" && this.email.length)
                writer.writeString(1, this.email);
            if (typeof this.username === "string" && this.username.length)
                writer.writeString(2, this.username);
            if (typeof this.password === "string" && this.password.length)
                writer.writeString(3, this.password);
            if (typeof this.profile_photo === "string" && this.profile_photo.length)
                writer.writeString(4, this.profile_photo);
            if (this.follow_tag_arr !== undefined)
                writer.writeRepeatedString(5, this.follow_tag_arr);
            if (this.published_article_arr !== undefined)
                writer.writeRepeatedString(6, this.published_article_arr);
            if (this.bookmark_article_arr !== undefined)
                writer.writeRepeatedString(7, this.bookmark_article_arr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        message.profile_photo = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class Article extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            article_id?: string;
            email?: string;
            author?: string;
            user_photo?: string;
            location?: string;
            article_photo?: string[];
            content?: string;
            post_time?: string;
            related_tag_arr?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("article_id" in data && data.article_id != undefined) {
                    this.article_id = data.article_id;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("author" in data && data.author != undefined) {
                    this.author = data.author;
                }
                if ("user_photo" in data && data.user_photo != undefined) {
                    this.user_photo = data.user_photo;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("article_photo" in data && data.article_photo != undefined) {
                    this.article_photo = data.article_photo;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("post_time" in data && data.post_time != undefined) {
                    this.post_time = data.post_time;
                }
                if ("related_tag_arr" in data && data.related_tag_arr != undefined) {
                    this.related_tag_arr = data.related_tag_arr;
                }
            }
        }
        get article_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set article_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get author() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set author(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_photo() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set user_photo(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get location() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get article_photo() {
            return pb_1.Message.getField(this, 6) as string[];
        }
        set article_photo(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get content() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get post_time() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set post_time(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get related_tag_arr() {
            return pb_1.Message.getField(this, 9) as string[];
        }
        set related_tag_arr(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            article_id?: string;
            email?: string;
            author?: string;
            user_photo?: string;
            location?: string;
            article_photo?: string[];
            content?: string;
            post_time?: string;
            related_tag_arr?: string[];
        }) {
            const message = new Article({});
            if (data.article_id != null) {
                message.article_id = data.article_id;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.author != null) {
                message.author = data.author;
            }
            if (data.user_photo != null) {
                message.user_photo = data.user_photo;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.article_photo != null) {
                message.article_photo = data.article_photo;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.post_time != null) {
                message.post_time = data.post_time;
            }
            if (data.related_tag_arr != null) {
                message.related_tag_arr = data.related_tag_arr;
            }
            return message;
        }
        toObject() {
            const data: {
                article_id?: string;
                email?: string;
                author?: string;
                user_photo?: string;
                location?: string;
                article_photo?: string[];
                content?: string;
                post_time?: string;
                related_tag_arr?: string[];
            } = {};
            if (this.article_id != null) {
                data.article_id = this.article_id;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.author != null) {
                data.author = this.author;
            }
            if (this.user_photo != null) {
                data.user_photo = this.user_photo;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.article_photo != null) {
                data.article_photo = this.article_photo;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.post_time != null) {
                data.post_time = this.post_time;
            }
            if (this.related_tag_arr != null) {
                data.related_tag_arr = this.related_tag_arr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.article_id === "string" && this.article_id.length)
                writer.writeString(1, this.article_id);
            if (typeof this.email === "string" && this.email.length)
                writer.writeString(2, this.email);
            if (typeof this.author === "string" && this.author.length)
                writer.writeString(3, this.author);
            if (typeof this.user_photo === "string" && this.user_photo.length)
                writer.writeString(4, this.user_photo);
            if (typeof this.location === "string" && this.location.length)
                writer.writeString(5, this.location);
            if (this.article_photo !== undefined)
                writer.writeRepeatedString(6, this.article_photo);
            if (typeof this.content === "string" && this.content.length)
                writer.writeString(7, this.content);
            if (typeof this.post_time === "string" && this.post_time.length)
                writer.writeString(8, this.post_time);
            if (this.related_tag_arr !== undefined)
                writer.writeRepeatedString(9, this.related_tag_arr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Article {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Article();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.article_id = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.author = reader.readString();
                        break;
                    case 4:
                        message.user_photo = reader.readString();
                        break;
                    case 5:
                        message.location = reader.readString();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.content = reader.readString();
                        break;
                    case 8:
                        message.post_time = reader.readString();
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Article {
            return Article.deserialize(bytes);
        }
    }
    export class Tag extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            tagname?: string;
            article_arr?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tagname" in data && data.tagname != undefined) {
                    this.tagname = data.tagname;
                }
                if ("article_arr" in data && data.article_arr != undefined) {
                    this.article_arr = data.article_arr;
                }
            }
        }
        get tagname() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set tagname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get article_arr() {
            return pb_1.Message.getField(this, 2) as string[];
        }
        set article_arr(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tagname?: string;
            article_arr?: string[];
        }) {
            const message = new Tag({});
            if (data.tagname != null) {
                message.tagname = data.tagname;
            }
            if (data.article_arr != null) {
                message.article_arr = data.article_arr;
            }
            return message;
        }
        toObject() {
            const data: {
                tagname?: string;
                article_arr?: string[];
            } = {};
            if (this.tagname != null) {
                data.tagname = this.tagname;
            }
            if (this.article_arr != null) {
                data.article_arr = this.article_arr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.tagname === "string" && this.tagname.length)
                writer.writeString(1, this.tagname);
            if (this.article_arr !== undefined)
                writer.writeRepeatedString(2, this.article_arr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Tag {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tag();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tagname = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Tag {
            return Tag.deserialize(bytes);
        }
    }
}
