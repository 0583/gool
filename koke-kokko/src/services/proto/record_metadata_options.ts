/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: record_metadata_options.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/descriptor";
import * as dependency_2 from "./record_metadata";
import * as pb_1 from "google-protobuf";
export namespace webaas.db.record {
    export class SchemaOptions extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            split_long_records?: boolean;
            store_record_versions?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("split_long_records" in data && data.split_long_records != undefined) {
                    this.split_long_records = data.split_long_records;
                }
                if ("store_record_versions" in data && data.store_record_versions != undefined) {
                    this.store_record_versions = data.store_record_versions;
                }
            }
        }
        get split_long_records() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set split_long_records(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get store_record_versions() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set store_record_versions(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            split_long_records?: boolean;
            store_record_versions?: boolean;
        }) {
            const message = new SchemaOptions({});
            if (data.split_long_records != null) {
                message.split_long_records = data.split_long_records;
            }
            if (data.store_record_versions != null) {
                message.store_record_versions = data.store_record_versions;
            }
            return message;
        }
        toObject() {
            const data: {
                split_long_records?: boolean;
                store_record_versions?: boolean;
            } = {};
            if (this.split_long_records != null) {
                data.split_long_records = this.split_long_records;
            }
            if (this.store_record_versions != null) {
                data.store_record_versions = this.store_record_versions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.split_long_records !== undefined)
                writer.writeBool(3, this.split_long_records);
            if (this.store_record_versions !== undefined)
                writer.writeBool(4, this.store_record_versions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SchemaOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SchemaOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        message.split_long_records = reader.readBool();
                        break;
                    case 4:
                        message.store_record_versions = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SchemaOptions {
            return SchemaOptions.deserialize(bytes);
        }
    }
    export class FieldOptions extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            primary_key?: boolean;
            index?: FieldOptions.IndexOption;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("primary_key" in data && data.primary_key != undefined) {
                    this.primary_key = data.primary_key;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get primary_key() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set primary_key(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getWrapperField(this, FieldOptions.IndexOption, 2) as FieldOptions.IndexOption;
        }
        set index(value: FieldOptions.IndexOption) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            primary_key?: boolean;
            index?: ReturnType<typeof FieldOptions.IndexOption.prototype.toObject>;
        }) {
            const message = new FieldOptions({});
            if (data.primary_key != null) {
                message.primary_key = data.primary_key;
            }
            if (data.index != null) {
                message.index = FieldOptions.IndexOption.fromObject(data.index);
            }
            return message;
        }
        toObject() {
            const data: {
                primary_key?: boolean;
                index?: ReturnType<typeof FieldOptions.IndexOption.prototype.toObject>;
            } = {};
            if (this.primary_key != null) {
                data.primary_key = this.primary_key;
            }
            if (this.index != null) {
                data.index = this.index.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.primary_key !== undefined)
                writer.writeBool(1, this.primary_key);
            if (this.index !== undefined)
                writer.writeMessage(2, this.index, () => this.index.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.primary_key = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.index, () => message.index = FieldOptions.IndexOption.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FieldOptions {
            return FieldOptions.deserialize(bytes);
        }
    }
    export namespace FieldOptions {
        export class IndexOption extends pb_1.Message {
            #one_of_decls = [];
            constructor(data?: any[] | {
                type?: string;
                unique?: boolean;
                options?: dependency_2.webaas.db.record.Index.Option[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("unique" in data && data.unique != undefined) {
                        this.unique = data.unique;
                    }
                    if ("options" in data && data.options != undefined) {
                        this.options = data.options;
                    }
                }
            }
            get type() {
                return pb_1.Message.getField(this, 1) as string;
            }
            set type(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get unique() {
                return pb_1.Message.getField(this, 2) as boolean;
            }
            set unique(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get options() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_2.webaas.db.record.Index.Option, 3) as dependency_2.webaas.db.record.Index.Option[];
            }
            set options(value: dependency_2.webaas.db.record.Index.Option[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data: {
                type?: string;
                unique?: boolean;
                options?: ReturnType<typeof dependency_2.webaas.db.record.Index.Option.prototype.toObject>[];
            }) {
                const message = new IndexOption({});
                if (data.type != null) {
                    message.type = data.type;
                }
                if (data.unique != null) {
                    message.unique = data.unique;
                }
                if (data.options != null) {
                    message.options = data.options.map(item => dependency_2.webaas.db.record.Index.Option.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    type?: string;
                    unique?: boolean;
                    options?: ReturnType<typeof dependency_2.webaas.db.record.Index.Option.prototype.toObject>[];
                } = {};
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.unique != null) {
                    data.unique = this.unique;
                }
                if (this.options != null) {
                    data.options = this.options.map((item: dependency_2.webaas.db.record.Index.Option) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (typeof this.type === "string" && this.type.length)
                    writer.writeString(1, this.type);
                if (this.unique !== undefined)
                    writer.writeBool(2, this.unique);
                if (this.options !== undefined)
                    writer.writeRepeatedMessage(3, this.options, (item: dependency_2.webaas.db.record.Index.Option) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexOption {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexOption();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.type = reader.readString();
                            break;
                        case 2:
                            message.unique = reader.readBool();
                            break;
                        case 3:
                            reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.webaas.db.record.Index.Option.deserialize(reader), dependency_2.webaas.db.record.Index.Option));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): IndexOption {
                return IndexOption.deserialize(bytes);
            }
        }
    }
}
